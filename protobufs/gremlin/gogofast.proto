syntax = "proto2";
package test;

message NidOptNative {
  optional double Field1 = 1;
  optional float Field2 = 2;
  optional int32 Field3 = 3;
  optional int64 Field4 = 4;
  optional uint32 Field5 = 5;
  optional uint64 Field6 = 6;
  optional sint32 Field7 = 7;
  optional sint64 Field8 = 8;
  optional fixed32 Field9 = 9;
  optional sfixed32 Field10 = 10;
  optional fixed64 Field11 = 11;
  optional sfixed64 Field12 = 12;
  optional bool Field13 = 13;
  optional string Field14 = 14;
  optional bytes Field15 = 15;
}

message NinOptNative {
  optional double Field1 = 1;
  optional float Field2 = 2;
  optional int32 Field3 = 3;
  optional int64 Field4 = 4;
  optional uint32 Field5 = 5;
  optional uint64 Field6 = 6;
  optional sint32 Field7 = 7;
  optional sint64 Field8 = 8;
  optional fixed32 Field9 = 9;
  optional sfixed32 Field10 = 10;
  optional fixed64 Field11 = 11;
  optional sfixed64 Field12 = 12;
  optional bool Field13 = 13;
  optional string Field14 = 14;
  optional bytes Field15 = 15;
}

message NidRepNative {
  repeated double Field1 = 1;
  repeated float Field2 = 2;
  repeated int32 Field3 = 3;
  repeated int64 Field4 = 4;
  repeated uint32 Field5 = 5;
  repeated uint64 Field6 = 6;
  repeated sint32 Field7 = 7;
  repeated sint64 Field8 = 8;
  repeated fixed32 Field9 = 9;
  repeated sfixed32 Field10 = 10;
  repeated fixed64 Field11 = 11;
  repeated sfixed64 Field12 = 12;
  repeated bool Field13 = 13;
  repeated string Field14 = 14;
  repeated bytes Field15 = 15;
}

message NinRepNative {
  repeated double Field1 = 1;
  repeated float Field2 = 2;
  repeated int32 Field3 = 3;
  repeated int64 Field4 = 4;
  repeated uint32 Field5 = 5;
  repeated uint64 Field6 = 6;
  repeated sint32 Field7 = 7;
  repeated sint64 Field8 = 8;
  repeated fixed32 Field9 = 9;
  repeated sfixed32 Field10 = 10;
  repeated fixed64 Field11 = 11;
  repeated sfixed64 Field12 = 12;
  repeated bool Field13 = 13;
  repeated string Field14 = 14;
  repeated bytes Field15 = 15;
}

message NidRepPackedNative {
  repeated double Field1 = 1;
  repeated float Field2 = 2;
  repeated int32 Field3 = 3;
  repeated int64 Field4 = 4;
  repeated uint32 Field5 = 5;
  repeated uint64 Field6 = 6;
  repeated sint32 Field7 = 7;
  repeated sint64 Field8 = 8;
  repeated fixed32 Field9 = 9;
  repeated sfixed32 Field10 = 10;
  repeated fixed64 Field11 = 11;
  repeated sfixed64 Field12 = 12;
  repeated bool Field13 = 13;
}

message NinRepPackedNative {
  repeated double Field1 = 1;
  repeated float Field2 = 2;
  repeated int32 Field3 = 3;
  repeated int64 Field4 = 4;
  repeated uint32 Field5 = 5;
  repeated uint64 Field6 = 6;
  repeated sint32 Field7 = 7;
  repeated sint64 Field8 = 8;
  repeated fixed32 Field9 = 9;
  repeated sfixed32 Field10 = 10;
  repeated fixed64 Field11 = 11;
  repeated sfixed64 Field12 = 12;
  repeated bool Field13 = 13;
}

message NidOptStruct {
  optional double Field1 = 1;
  optional float Field2 = 2;
  optional NidOptNative Field3 = 3;
  optional NinOptNative Field4 = 4;
  optional uint64 Field6 = 6;
  optional sint32 Field7 = 7;
  optional NidOptNative Field8 = 8;
  optional bool Field13 = 13;
  optional string Field14 = 14;
  optional bytes Field15 = 15;
}

message NinOptStruct {
  optional double Field1 = 1;
  optional float Field2 = 2;
  optional NidOptNative Field3 = 3;
  optional NinOptNative Field4 = 4;
  optional uint64 Field6 = 6;
  optional sint32 Field7 = 7;
  optional NidOptNative Field8 = 8;
  optional bool Field13 = 13;
  optional string Field14 = 14;
  optional bytes Field15 = 15;
}

message NidRepStruct {
  repeated double Field1 = 1;
  repeated float Field2 = 2;
  repeated NidOptNative Field3 = 3;
  repeated NinOptNative Field4 = 4;
  repeated uint64 Field6 = 6;
  repeated sint32 Field7 = 7;
  repeated NidOptNative Field8 = 8;
  repeated bool Field13 = 13;
  repeated string Field14 = 14;
  repeated bytes Field15 = 15;
}

message NinRepStruct {
  repeated double Field1 = 1;
  repeated float Field2 = 2;
  repeated NidOptNative Field3 = 3;
  repeated NinOptNative Field4 = 4;
  repeated uint64 Field6 = 6;
  repeated sint32 Field7 = 7;
  repeated NidOptNative Field8 = 8;
  repeated bool Field13 = 13;
  repeated string Field14 = 14;
  repeated bytes Field15 = 15;
}

message NidEmbeddedStruct {
  optional NidOptNative Field1 = 1;
  optional NidOptNative Field200 = 200;
  optional bool Field210 = 210;
}

message NinEmbeddedStruct {
  optional NidOptNative Field1 = 1;
  optional NidOptNative Field200 = 200;
  optional bool Field210 = 210;
}

message NidNestedStruct {
  optional NidOptStruct Field1 = 1;
  repeated NidRepStruct Field2 = 2;
}

message NinNestedStruct {
  optional NinOptStruct Field1 = 1;
  repeated NinRepStruct Field2 = 2;
}

message NidOptCustom {
  optional bytes Id = 1;
  optional bytes Value = 2;
}

message CustomDash {
  optional bytes Value = 1;
}

message NinOptCustom {
  optional bytes Id = 1;
  optional bytes Value = 2;
}

message NidRepCustom {
  repeated bytes Id = 1;
  repeated bytes Value = 2;
}

message NinRepCustom {
  repeated bytes Id = 1;
  repeated bytes Value = 2;
}

message NinOptNativeUnion {

  optional double Field1 = 1;
  optional float Field2 = 2;
  optional int32 Field3 = 3;
  optional int64 Field4 = 4;
  optional uint32 Field5 = 5;
  optional uint64 Field6 = 6;
  optional bool Field13 = 13;
  optional string Field14 = 14;
  optional bytes Field15 = 15;
}

message NinOptStructUnion {

  optional double Field1 = 1;
  optional float Field2 = 2;
  optional NidOptNative Field3 = 3;
  optional NinOptNative Field4 = 4;
  optional uint64 Field6 = 6;
  optional sint32 Field7 = 7;
  optional bool Field13 = 13;
  optional string Field14 = 14;
  optional bytes Field15 = 15;
}

message NinEmbeddedStructUnion {

  optional NidOptNative Field1 = 1;
  optional NinOptNative Field200 = 200;
  optional bool Field210 = 210;
}

message NinNestedStructUnion {

  optional NinOptNativeUnion Field1 = 1;
  optional NinOptStructUnion Field2 = 2;
  optional NinEmbeddedStructUnion Field3 = 3;
}

message Tree {

  optional OrBranch Or = 1;
  optional AndBranch And = 2;
  optional Leaf Leaf = 3;
}

message OrBranch {
  optional Tree Left = 1;
  optional Tree Right = 2;
}

message AndBranch {
  optional Tree Left = 1;
  optional Tree Right = 2;
}

message Leaf {
  optional int64 Value = 1;
  optional string StrValue = 2;
}

message DeepTree {

  optional ADeepBranch Down = 1;
  optional AndDeepBranch And = 2;
  optional DeepLeaf Leaf = 3;
}

message ADeepBranch {
  optional DeepTree Down = 2;
}

message AndDeepBranch {
  optional DeepTree Left = 1;
  optional DeepTree Right = 2;
}

message DeepLeaf {
  optional Tree Tree = 1;
}

message Nil {

}

enum TheTestEnum {
  A = 0;
  B = 1;
  C = 2;
}

enum AnotherTestEnum {

  D = 10;
  E = 11;
}

// YetAnotherTestEnum is used to test cross-package import of custom name
// fields and default resolution.
enum YetAnotherTestEnum {

  AA = 0;
  BB = 1;
}

// YetAnotherTestEnum is used to test cross-package import of custom name
// fields and default resolution.
enum YetYetAnotherTestEnum {

  CC = 0;
  DD = 1;
}

message NidOptEnum {
  optional TheTestEnum Field1 = 1;
}

message NinOptEnum {
  optional TheTestEnum Field1 = 1;
  optional YetAnotherTestEnum Field2 = 2;
  optional YetYetAnotherTestEnum Field3 = 3;
}

message NidRepEnum {
  repeated TheTestEnum Field1 = 1;
  repeated YetAnotherTestEnum Field2 = 2;
  repeated YetYetAnotherTestEnum Field3 = 3;
}

message NinRepEnum {
  repeated TheTestEnum Field1 = 1;
  repeated YetAnotherTestEnum Field2 = 2;
  repeated YetYetAnotherTestEnum Field3 = 3;
}

message NinOptEnumDefault {


  optional TheTestEnum Field1 = 1 ;
  optional YetAnotherTestEnum Field2 = 2;
  optional YetYetAnotherTestEnum Field3 = 3;
}

message AnotherNinOptEnum {
  optional AnotherTestEnum Field1 = 1;
  optional YetAnotherTestEnum Field2 = 2;
  optional YetYetAnotherTestEnum Field3 = 3;
}

message AnotherNinOptEnumDefault {


  optional AnotherTestEnum Field1 = 1;
  optional YetAnotherTestEnum Field2 = 2;
  optional YetYetAnotherTestEnum Field3 = 3;
}


message Timer {
  optional sfixed64 Time1 = 1;
  optional sfixed64 Time2 = 2;
  optional bytes Data = 3;
}

message MyExtendable {

  optional int64 Field1 = 1;
  extensions 100 to 199;
}

extend MyExtendable {
  optional double FieldA = 100;
  optional NinOptNative FieldB = 101;
  optional NinEmbeddedStruct FieldC = 102;
  repeated int64 FieldD = 104;
  repeated NinOptNative FieldE = 105;
}

message OtherExtenable {

  optional int64 Field2 = 2;
  extensions 14 to 16;
  optional int64 Field13 = 13;
  extensions 10 to 12;
  optional MyExtendable M = 1;
}

message NestedDefinition {
  optional int64 Field1 = 1;
  message NestedMessage {
    optional fixed64 NestedField1 = 1;
    optional NestedNestedMsg NNM = 2;
    message NestedNestedMsg {
      optional string NestedNestedField1 = 10;
    }
  }
  enum NestedEnum {
    TYPE_NESTED = 1;
  }
  optional NestedEnum EnumField = 2;
  optional NestedMessage.NestedNestedMsg NNM = 3;
  optional NestedMessage NM = 4;
}

message NestedScope {
  optional NestedDefinition.NestedMessage.NestedNestedMsg A = 1;
  optional NestedDefinition.NestedEnum B = 2;
  optional NestedDefinition.NestedMessage C = 3;
}

message NinOptNativeDefault {


  optional double Field1 = 1;
  optional float Field2 = 2;
  optional int32 Field3 = 3;
  optional int64 Field4 = 4;
  optional uint32 Field5 = 5;
  optional uint64 Field6 = 6;
  optional sint32 Field7 = 7;
  optional sint64 Field8 = 8;
  optional fixed32 Field9 = 9;
  optional sfixed32 Field10 = 10;
  optional fixed64 Field11 = 11;
  optional sfixed64 Field12 = 12;
  optional bool Field13 = 13;
  optional string Field14 = 14;
  optional bytes Field15 = 15;
}

message CustomContainer {
  optional NidOptCustom CustomStruct = 1;
}

message CustomNameNidOptNative {
  optional double Field1 = 1;
  optional float Field2 = 2;
  optional int32 Field3 = 3;
  optional int64 Field4 = 4;
  optional uint32 Field5 = 5;
  optional uint64 Field6 = 6;
  optional sint32 Field7 = 7;
  optional sint64 Field8 = 8;
  optional fixed32 Field9 = 9;
  optional sfixed32 Field10 = 10;
  optional fixed64 Field11 = 11;
  optional sfixed64 Field12 = 12;
  optional bool Field13 = 13;
  optional string Field14 = 14;
  optional bytes Field15 = 15;
}

message CustomNameNinOptNative {
  optional double Field1 = 1;
  optional float Field2 = 2;
  optional int32 Field3 = 3;
  optional int64 Field4 = 4;
  optional uint32 Field5 = 5;
  optional uint64 Field6 = 6;
  optional sint32 Field7 = 7;
  optional sint64 Field8 = 8;
  optional fixed32 Field9 = 9;
  optional sfixed32 Field10 = 10;
  optional fixed64 Field11 = 11;
  optional sfixed64 Field12 = 12;
  optional bool Field13 = 13;
  optional string Field14 = 14;
  optional bytes Field15 = 15;
}

message CustomNameNinRepNative {
  repeated double Field1 = 1;
  repeated float Field2 = 2;
  repeated int32 Field3 = 3;
  repeated int64 Field4 = 4;
  repeated uint32 Field5 = 5;
  repeated uint64 Field6 = 6;
  repeated sint32 Field7 = 7;
  repeated sint64 Field8 = 8;
  repeated fixed32 Field9 = 9;
  repeated sfixed32 Field10 = 10;
  repeated fixed64 Field11 = 11;
  repeated sfixed64 Field12 = 12;
  repeated bool Field13 = 13;
  repeated string Field14 = 14;
  repeated bytes Field15 = 15;
}

message CustomNameNinStruct {
  optional double Field1 = 1;
  optional float Field2 = 2;
  optional NidOptNative Field3 = 3;
  repeated NinOptNative Field4 = 4;
  optional uint64 Field6 = 6;
  optional sint32 Field7 = 7;
  optional NidOptNative Field8 = 8;
  optional bool Field13 = 13;
  optional string Field14 = 14;
  optional bytes Field15 = 15;
}

message CustomNameCustomType {
  optional bytes Id = 1;
  optional bytes Value = 2;
  repeated bytes Ids = 3;
  repeated bytes Values = 4;
}

message CustomNameNinEmbeddedStructUnion {

  optional NidOptNative Field1 = 1;
  optional NinOptNative Field200 = 200;
  optional bool Field210 = 210;
}

message CustomNameEnum {
  optional TheTestEnum Field1 = 1;
  repeated TheTestEnum Field2 = 2;
}

message NoExtensionsMap {


  optional int64 Field1 = 1;
  extensions 100 to 199;
}

extend NoExtensionsMap {
  optional double FieldA1 = 100;
  optional NinOptNative FieldB1 = 101;
  optional NinEmbeddedStruct FieldC1 = 102;
}

message Unrecognized {

  optional string Field1 = 1;
}

message UnrecognizedWithInner {
  message Inner {

    optional uint32 Field1 = 1;
  }

  repeated Inner embedded = 1;
  optional string Field2 = 2;
}

message UnrecognizedWithEmbed {
  message Embedded {

    optional uint32 Field1 = 1;
  }

  optional Embedded embedded = 1;
  optional string Field2 = 2;
}

message Node {
  optional string Label = 1;
  repeated Node Children = 2;
}

message NonByteCustomType {
  optional ProtoType Field1 = 1;
}

message NidOptNonByteCustomType {
  optional ProtoType Field1 = 1;
}

message NinOptNonByteCustomType {
  optional ProtoType Field1 = 1;
}

message NidRepNonByteCustomType {
  repeated ProtoType Field1 = 1;
}

message NinRepNonByteCustomType {
  repeated ProtoType Field1 = 1;
}

message ProtoType {
  optional string Field2 = 1;
}
